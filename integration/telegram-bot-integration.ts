/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Error Logger –¥–ª—è Telegram Bot (bot.ts)
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–æ–∫ –≤ Error Logger Bot
 */

interface ErrorContext {
  userId?: string;
  chatId?: number;
  userPhone?: string;
  username?: string;
  messageText?: string;
  commandName?: string;
  [key: string]: any;
}

interface ErrorData {
  platform: string;
  userPhone?: string;
  userId?: string;
  errorType: string;
  errorMessage: string;
  stackTrace?: string;
  url?: string;
  userAgent?: string;
  timestamp?: string;
  additionalData?: any;
}

class TelegramErrorReporter {
  private apiUrl: string;
  private platform: string;
  private enabled: boolean;

  constructor(config: {
    apiUrl?: string;
    platform?: string;
    enabled?: boolean;
  } = {}) {
    this.apiUrl = config.apiUrl || 'https://savolia-error-logger.onrender.com/api/log-error';
    this.platform = config.platform || 'bot.ts';
    this.enabled = config.enabled ?? true;
    
    console.log('üîç Telegram Error Reporter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', {
      platform: this.platform,
      enabled: this.enabled
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ –≤ Error Logger Bot
   */
  async reportError(
    error: Error | string, 
    context: ErrorContext = {},
    additionalData: any = {}
  ): Promise<boolean> {
    if (!this.enabled) {
      return false;
    }

    try {
      const errorMessage = typeof error === 'string' ? error : error.message;
      const stackTrace = typeof error === 'object' && error.stack ? error.stack : undefined;
      const errorType = typeof error === 'object' && error.name ? error.name : 'Telegram Bot Error';

      const payload: ErrorData = {
        platform: this.platform,
        userPhone: context.userPhone || context.username || `Telegram User ${context.userId}`,
        userId: context.userId?.toString(),
        errorType,
        errorMessage,
        stackTrace,
        timestamp: new Date().toISOString(),
        additionalData: {
          ...additionalData,
          telegramContext: {
            chatId: context.chatId,
            username: context.username,
            messageText: context.messageText?.substring(0, 100), // –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            commandName: context.commandName
          },
          botInfo: {
            platform: 'telegram',
            nodeVersion: process.version,
            environment: process.env.NODE_ENV || 'unknown'
          }
        }
      };

      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      if (response.ok) {
        console.log('üì§ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Error Logger:', errorType);
        return true;
      } else {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ Error Logger:', response.status);
        return false;
      }

    } catch (reportingError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Error Logger:', reportingError);
      return false;
    }
  }

  /**
   * Wrapper –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π
   */
  async handleWithErrorReporting<T>(
    operation: () => Promise<T>,
    context: ErrorContext = {},
    errorHandler?: (error: Error) => void
  ): Promise<T | null> {
    try {
      return await operation();
    } catch (error) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ Error Logger
      await this.reportError(error as Error, context);
      
      // –í—ã–∑—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (errorHandler) {
        errorHandler(error as Error);
      }

      return null;
    }
  }

  /**
   * Decorator –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—à–∏–±–æ–∫
   */
  withErrorReporting(context: ErrorContext = {}) {
    return (target: any, propertyName: string, descriptor: PropertyDescriptor) => {
      const method = descriptor.value;

      descriptor.value = async function (...args: any[]) {
        try {
          return await method.apply(this, args);
        } catch (error) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ Error Logger
          const reporter = new TelegramErrorReporter();
          await reporter.reportError(error as Error, {
            ...context,
            methodName: propertyName,
            className: target.constructor.name
          });

          throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
        }
      };
    };
  }

  /**
   * –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫
   */
  setEnabled(enabled: boolean): void {
    this.enabled = enabled;
    console.log(`üîÑ Error Reporter ${enabled ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}`);
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ bot.ts
export const telegramErrorReporter = new TelegramErrorReporter();

// –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

/**
 * 1. –ü—Ä–æ—Å—Ç–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏:
 * 
 * import { telegramErrorReporter } from './telegram-bot-integration';
 * 
 * try {
 *   // –≤–∞—à –∫–æ–¥
 * } catch (error) {
 *   await telegramErrorReporter.reportError(error, {
 *     userId: ctx.from.id.toString(),
 *     chatId: ctx.chat.id,
 *     userPhone: ctx.from.phone_number,
 *     username: ctx.from.username,
 *     commandName: 'start'
 *   });
 * }
 */

/**
 * 2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ wrapper'–∞:
 * 
 * const result = await telegramErrorReporter.handleWithErrorReporting(
 *   () => someRiskyOperation(),
 *   { userId: ctx.from.id.toString(), chatId: ctx.chat.id },
 *   (error) => ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –º—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º')
 * );
 */

/**
 * 3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞–∫ middleware –¥–ª—è –∫–æ–º–∞–Ω–¥:
 * 
 * bot.command('start', async (ctx) => {
 *   await telegramErrorReporter.handleWithErrorReporting(
 *     async () => {
 *       // –ª–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã start
 *       await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!');
 *     },
 *     {
 *       userId: ctx.from.id.toString(),
 *       chatId: ctx.chat.id,
 *       username: ctx.from.username,
 *       commandName: 'start',
 *       messageText: ctx.message.text
 *     },
 *     (error) => ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
 *   );
 * });
 */

/**
 * 4. Decorator –¥–ª—è –∫–ª–∞—Å—Å–æ–≤:
 * 
 * class BotService {
 *   @telegramErrorReporter.withErrorReporting({ service: 'BotService' })
 *   async processMessage(message: string) {
 *     // –≤–∞—à –∫–æ–¥
 *   }
 * }
 */

export default TelegramErrorReporter;