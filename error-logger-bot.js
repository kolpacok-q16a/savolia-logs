const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const cors = require('cors');
const moment = require('moment');
const UAParser = require('ua-parser-js');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = '8087171595:AAGcTv_TiNAY-Mv8CSyaIwk2tzYnnEM4Dsk';
const ADMIN_ID = '7752180805'; // –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
const PORT = process.env.PORT || 3333;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true });
const app = express();

// Middleware
app.use(cors());
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

console.log('üöÄ Savolia Error Logger Bot –∑–∞–ø—É—â–µ–Ω');
console.log(`üë§ –ê–¥–º–∏–Ω ID: ${ADMIN_ID}`);
console.log(`üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É: ${PORT}`);

// –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
class ErrorLogger {
  constructor() {
    this.platforms = {
      'bot.ts': 'ü§ñ Telegram Bot',
      'savolia-frontend': 'üì± Mini App (Telegram)',
      'savolia-web': 'üåê Web Site'
    };
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
  formatErrorMessage(errorData) {
    const {
      platform,
      userPhone,
      device,
      osVersion,
      errorType,
      errorMessage,
      stackTrace,
      timestamp,
      url,
      userId,
      userAgent,
      additionalData
    } = errorData;

    const platformIcon = this.platforms[platform] || '‚ùì Unknown Platform';
    const formattedTime = moment(timestamp).format('DD.MM.YYYY HH:mm:ss');
    
    let message = `üö® <b>–û–®–ò–ë–ö–ê –í SAVOLIA</b>\n\n`;
    message += `üìç <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> ${platformIcon}\n`;
    message += `üì± <b>–ù–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>${userPhone || '–ù–µ —É–∫–∞–∑–∞–Ω'}</code>\n`;
    
    if (userId) {
      message += `üÜî <b>User ID:</b> <code>${userId}</code>\n`;
    }
    
    message += `üíª <b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</b> ${device || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
    message += `‚öôÔ∏è <b>–û–°:</b> ${osVersion || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
    message += `‚ùå <b>–¢–∏–ø –æ—à–∏–±–∫–∏:</b> ${errorType || '–û–±—â–∞—è –æ—à–∏–±–∫–∞'}\n`;
    message += `üïê <b>–í—Ä–µ–º—è:</b> ${formattedTime}\n\n`;
    
    if (url) {
      message += `üîó <b>URL:</b> <code>${url}</code>\n\n`;
    }
    
    message += `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏:</b>\n<code>${errorMessage}</code>\n\n`;
    
    if (stackTrace) {
      // –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π stack trace
      const shortStack = stackTrace.length > 1000 
        ? stackTrace.substring(0, 1000) + '...\n[–û–±—Ä–µ–∑–∞–Ω–æ]' 
        : stackTrace;
      message += `üîç <b>Stack Trace:</b>\n<pre>${shortStack}</pre>\n\n`;
    }
    
    if (userAgent) {
      message += `üåê <b>User Agent:</b>\n<code>${userAgent}</code>\n\n`;
    }
    
    if (additionalData && Object.keys(additionalData).length > 0) {
      message += `üìä <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n<pre>${JSON.stringify(additionalData, null, 2)}</pre>`;
    }
    
    return message;
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ User Agent –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
  parseUserAgent(userAgent) {
    if (!userAgent) return { device: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', osVersion: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' };
    
    const parser = new UAParser(userAgent);
    const result = parser.getResult();
    
    const device = `${result.device.vendor || ''} ${result.device.model || result.browser.name || 'Unknown'}`.trim();
    const osVersion = `${result.os.name || 'Unknown'} ${result.os.version || ''}`.trim();
    
    return { device, osVersion };
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ –∞–¥–º–∏–Ω—É
  async sendErrorToAdmin(errorData) {
    try {
      const message = this.formatErrorMessage(errorData);
      
      await bot.sendMessage(ADMIN_ID, message, {
        parse_mode: 'HTML',
        disable_web_page_preview: true
      });
      
      console.log(`‚úÖ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É: ${errorData.platform} - ${errorData.errorType}`);
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É:', error);
      return false;
    }
  }
}

const errorLogger = new ErrorLogger();

// API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—à–∏–±–æ–∫
app.post('/api/log-error', async (req, res) => {
  try {
    const {
      platform,
      userPhone,
      userId,
      errorType,
      errorMessage,
      stackTrace,
      url,
      userAgent,
      additionalData
    } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!platform || !errorMessage) {
      return res.status(400).json({
        success: false,
        error: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: platform, errorMessage'
      });
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ User Agent –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    const deviceInfo = errorLogger.parseUserAgent(userAgent);

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∏
    const errorData = {
      platform,
      userPhone: userPhone || '–ù–µ —É–∫–∞–∑–∞–Ω',
      userId,
      device: deviceInfo.device,
      osVersion: deviceInfo.osVersion,
      errorType: errorType || 'Runtime Error',
      errorMessage,
      stackTrace,
      timestamp: new Date().toISOString(),
      url,
      userAgent,
      additionalData
    };

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ –∞–¥–º–∏–Ω—É
    const sent = await errorLogger.sendErrorToAdmin(errorData);

    if (sent) {
      res.json({
        success: true,
        message: '–û—à–∏–±–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞'
      });
    } else {
      res.status(500).json({
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É'
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ API:', error);
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// Health check —ç–Ω–¥–ø–æ–∏–Ω—Ç
app.get('/health', (req, res) => {
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    service: 'Savolia Error Logger Bot'
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();

  // –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º
  if (userId !== ADMIN_ID) {
    // –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∏—á–µ–º –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    console.log(`üö´ –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
    return;
  }

  // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞
  if (msg.text === '/start') {
    await bot.sendMessage(chatId, 
      'üöÄ <b>Savolia Error Logger Bot</b>\n\n' +
      'üîç –≠—Ç–æ—Ç –±–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤–æ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö Savolia:\n' +
      '‚Ä¢ ü§ñ Telegram Bot (bot.ts)\n' +
      '‚Ä¢ üì± Mini App (savolia-frontend)\n' +
      '‚Ä¢ üåê Web Site (savolia-web)\n\n' +
      'üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n' +
      '/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n' +
      '/help - –°–ø—Ä–∞–≤–∫–∞\n\n' +
      'üîî –í—Å–µ –æ—à–∏–±–∫–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è —Å—é–¥–∞.',
      { parse_mode: 'HTML' }
    );
  } else if (msg.text === '/status') {
    await bot.sendMessage(chatId,
      '‚úÖ <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</b>\n\n' +
      `ü§ñ –ë–æ—Ç: –ê–∫—Ç–∏–≤–µ–Ω\n` +
      `üåê API: –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}\n` +
      `üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${moment().format('DD.MM.YYYY HH:mm:ss')}\n` +
      `üìä –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: ${Object.keys(errorLogger.platforms).length}`,
      { parse_mode: 'HTML' }
    );
  } else if (msg.text === '/help') {
    await bot.sendMessage(chatId,
      'üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ Error Logger Bot</b>\n\n' +
      '<b>–§–æ—Ä–º–∞—Ç –æ—à–∏–±–∫–∏:</b>\n' +
      '‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ (bot.ts/frontend/web)\n' +
      '‚Ä¢ –ù–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n' +
      '‚Ä¢ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –û–°\n' +
      '‚Ä¢ –¢–∏–ø –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏\n' +
      '‚Ä¢ Stack trace\n' +
      '‚Ä¢ –í—Ä–µ–º—è –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è\n\n' +
      '<b>API Endpoint:</b>\n' +
      '<code>POST /api/log-error</code>\n\n' +
      '–í—Å–µ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é—Ç—Å—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ —ç—Ç–æ—Ç —á–∞—Ç.',
      { parse_mode: 'HTML' }
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞:', error);
});

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Error Logger Bot...');
  bot.stopPolling();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üåê API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
  console.log(`üì° –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—à–∏–±–æ–∫: POST /api/log-error`);
});