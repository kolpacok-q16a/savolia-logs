import asyncio
import json
import logging
import os
from datetime import datetime
from typing import Dict, Any, Optional

import requests
from flask import Flask, request, jsonify
from flask_cors import CORS
from telegram import Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from user_agents import parse as parse_user_agent
import threading

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = '8087171595:AAGcTv_TiNAY-Mv8CSyaIwk2tzYnnEM4Dsk'
ADMIN_ID = '7752180805'  # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
PORT = int(os.environ.get('PORT', 3333))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
CORS(app)

class ErrorLogger:
    def __init__(self):
        self.platforms = {
            'bot.ts': 'ü§ñ Telegram Bot',
            'savolia-frontend': 'üì± Mini App (Telegram)',
            'savolia-web': 'üåê Web Site'
        }
        self.bot = None
        
    def set_bot(self, bot: Bot):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
        self.bot = bot
    
    def format_error_message(self, error_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        platform = error_data.get('platform', 'unknown')
        user_phone = error_data.get('userPhone', '–ù–µ —É–∫–∞–∑–∞–Ω')
        device = error_data.get('device', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        os_version = error_data.get('osVersion', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        error_type = error_data.get('errorType', '–û–±—â–∞—è –æ—à–∏–±–∫–∞')
        error_message = error_data.get('errorMessage', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
        stack_trace = error_data.get('stackTrace')
        timestamp = error_data.get('timestamp')
        url = error_data.get('url')
        user_id = error_data.get('userId')
        user_agent = error_data.get('userAgent')
        additional_data = error_data.get('additionalData')
        
        platform_icon = self.platforms.get(platform, '‚ùì Unknown Platform')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        if timestamp:
            try:
                dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                formatted_time = dt.strftime('%d.%m.%Y %H:%M:%S')
            except:
                formatted_time = timestamp
        else:
            formatted_time = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
        
        message = f"üö® <b>–û–®–ò–ë–ö–ê –í SAVOLIA</b>\n\n"
        message += f"üìç <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {platform_icon}\n"
        message += f"üì± <b>–ù–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>{user_phone}</code>\n"
        
        if user_id:
            message += f"üÜî <b>User ID:</b> <code>{user_id}</code>\n"
            
        message += f"üíª <b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</b> {device}\n"
        message += f"‚öôÔ∏è <b>–û–°:</b> {os_version}\n"
        message += f"‚ùå <b>–¢–∏–ø –æ—à–∏–±–∫–∏:</b> {error_type}\n"
        message += f"üïê <b>–í—Ä–µ–º—è:</b> {formatted_time}\n\n"
        
        if url:
            message += f"üîó <b>URL:</b> <code>{url}</code>\n\n"
            
        message += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏:</b>\n<code>{error_message}</code>\n\n"
        
        if stack_trace:
            # –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π stack trace
            short_stack = stack_trace[:1000] + '...\n[–û–±—Ä–µ–∑–∞–Ω–æ]' if len(stack_trace) > 1000 else stack_trace
            message += f"üîç <b>Stack Trace:</b>\n<pre>{short_stack}</pre>\n\n"
            
        if user_agent:
            message += f"üåê <b>User Agent:</b>\n<code>{user_agent}</code>\n\n"
            
        if additional_data and isinstance(additional_data, dict) and additional_data:
            formatted_data = json.dumps(additional_data, ensure_ascii=False, indent=2)
            message += f"üìä <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n<pre>{formatted_data}</pre>"
            
        return message
    
    def parse_user_agent(self, user_agent: Optional[str]) -> Dict[str, str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ User Agent –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
        if not user_agent:
            return {'device': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 'osVersion': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
            
        try:
            parsed = parse_user_agent(user_agent)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            device_parts = []
            if parsed.device.brand:
                device_parts.append(parsed.device.brand)
            if parsed.device.model:
                device_parts.append(parsed.device.model)
            if not device_parts and parsed.browser.family:
                device_parts.append(parsed.browser.family)
                
            device = ' '.join(device_parts) if device_parts else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏—é –û–°
            os_parts = []
            if parsed.os.family:
                os_parts.append(parsed.os.family)
            if parsed.os.version_string:
                os_parts.append(parsed.os.version_string)
                
            os_version = ' '.join(os_parts) if os_parts else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            
            return {'device': device, 'osVersion': os_version}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ User Agent: {e}")
            return {'device': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 'osVersion': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
    
    async def send_error_to_admin(self, error_data: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ –∞–¥–º–∏–Ω—É"""
        if not self.bot:
            logger.error("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
            
        try:
            message = self.format_error_message(error_data)
            
            await self.bot.send_message(
                chat_id=ADMIN_ID,
                text=message,
                parse_mode='HTML',
                disable_web_page_preview=True
            )
            
            logger.info(f"‚úÖ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É: {error_data.get('platform')} - {error_data.get('errorType')}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
            return False

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
error_logger = ErrorLogger()

# Telegram –±–æ—Ç handlers
async def start_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = str(update.effective_user.id)
    
    if user_id != ADMIN_ID:
        logger.warning(f"üö´ –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        return
    
    message = (
        "üöÄ <b>Savolia Error Logger Bot</b>\n\n"
        "üîç –≠—Ç–æ—Ç –±–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤–æ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö Savolia:\n"
        "‚Ä¢ ü§ñ Telegram Bot (bot.ts)\n"
        "‚Ä¢ üì± Mini App (savolia-frontend)\n"
        "‚Ä¢ üåê Web Site (savolia-web)\n\n"
        "üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞\n\n"
        "üîî –í—Å–µ –æ—à–∏–±–∫–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è —Å—é–¥–∞."
    )
    
    await update.message.reply_text(message, parse_mode='HTML')

async def status_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    user_id = str(update.effective_user.id)
    
    if user_id != ADMIN_ID:
        return
    
    current_time = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
    platforms_count = len(error_logger.platforms)
    
    message = (
        "‚úÖ <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</b>\n\n"
        f"ü§ñ –ë–æ—Ç: –ê–∫—Ç–∏–≤–µ–Ω\n"
        f"üåê API: –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É {PORT}\n"
        f"üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {current_time}\n"
        f"üìä –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: {platforms_count}"
    )
    
    await update.message.reply_text(message, parse_mode='HTML')

async def help_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    user_id = str(update.effective_user.id)
    
    if user_id != ADMIN_ID:
        return
    
    message = (
        "üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ Error Logger Bot</b>\n\n"
        "<b>–§–æ—Ä–º–∞—Ç –æ—à–∏–±–∫–∏:</b>\n"
        "‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ (bot.ts/frontend/web)\n"
        "‚Ä¢ –ù–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "‚Ä¢ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –û–°\n"
        "‚Ä¢ –¢–∏–ø –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏\n"
        "‚Ä¢ Stack trace\n"
        "‚Ä¢ –í—Ä–µ–º—è –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è\n\n"
        "<b>API Endpoint:</b>\n"
        "<code>POST /api/log-error</code>\n\n"
        "–í—Å–µ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é—Ç—Å—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ —ç—Ç–æ—Ç —á–∞—Ç."
    )
    
    await update.message.reply_text(message, parse_mode='HTML')

async def handle_message(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = str(update.effective_user.id)
    
    if user_id != ADMIN_ID:
        # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∏—á–µ–º –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        logger.warning(f"üö´ –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        return

# Flask API endpoints
@app.route('/api/log-error', methods=['POST'])
def log_error():
    """API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—à–∏–±–æ–∫"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({
                'success': False,
                'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ'
            }), 400
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        platform = data.get('platform')
        error_message = data.get('errorMessage')
        
        if not platform or not error_message:
            return jsonify({
                'success': False,
                'error': '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: platform, errorMessage'
            }), 400
        
        # –ü–∞—Ä—Å–∏–Ω–≥ User Agent
        user_agent = data.get('userAgent')
        device_info = error_logger.parse_user_agent(user_agent)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∏
        error_data = {
            'platform': platform,
            'userPhone': data.get('userPhone', '–ù–µ —É–∫–∞–∑–∞–Ω'),
            'userId': data.get('userId'),
            'device': device_info['device'],
            'osVersion': device_info['osVersion'],
            'errorType': data.get('errorType', 'Runtime Error'),
            'errorMessage': error_message,
            'stackTrace': data.get('stackTrace'),
            'timestamp': data.get('timestamp', datetime.now().isoformat()),
            'url': data.get('url'),
            'userAgent': user_agent,
            'additionalData': data.get('additionalData')
        }
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ –∞–¥–º–∏–Ω—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        sent = loop.run_until_complete(error_logger.send_error_to_admin(error_data))
        loop.close()
        
        if sent:
            return jsonify({
                'success': True,
                'message': '–û—à–∏–±–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞'
            })
        else:
            return jsonify({
                'success': False,
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É'
            }), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ API: {e}")
        return jsonify({
            'success': False,
            'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        }), 500

@app.route('/health', methods=['GET'])
def health_check():
    """Health check —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return jsonify({
        'status': 'OK',
        'timestamp': datetime.now().isoformat(),
        'service': 'Savolia Error Logger Bot'
    })

def run_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    async def main():
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –≤ –ª–æ–≥–≥–µ—Ä
        error_logger.set_bot(application.bot)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("status", status_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("üöÄ Savolia Error Logger Bot –∑–∞–ø—É—â–µ–Ω")
        logger.info(f"üë§ –ê–¥–º–∏–Ω ID: {ADMIN_ID}")
        
        await application.run_polling()
    
    # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    asyncio.run(main())

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=run_bot, daemon=True)
    bot_thread.start()
    
    # –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞
    logger.info(f"üåê API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:{PORT}")
    logger.info(f"üì° –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—à–∏–±–æ–∫: POST /api/log-error")
    
    app.run(host='0.0.0.0', port=PORT, debug=False)