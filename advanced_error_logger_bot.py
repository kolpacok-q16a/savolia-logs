import asyncio
import json
import logging
import os
import psutil
import subprocess
import sys
import time
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, List

import requests
from flask import Flask, request, jsonify
from flask_cors import CORS
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from user_agents import parse as parse_user_agent
import threading

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = '8087171595:AAGcTv_TiNAY-Mv8CSyaIwk2tzYnnEM4Dsk'
ADMIN_ID = '7752180805'  # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
PORT = int(os.environ.get('PORT', 3333))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
CORS(app)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
start_time = datetime.now()
error_count = 0
platform_stats = {'bot.ts': 0, 'savolia-frontend': 0, 'savolia-web': 0}
recent_errors = []

class SystemMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"""
    
    @staticmethod
    def get_system_info():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            # CPU –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            cpu_percent = psutil.cpu_percent(interval=1)
            cpu_count = psutil.cpu_count()
            
            # –ü–∞–º—è—Ç—å
            memory = psutil.virtual_memory()
            memory_total = round(memory.total / (1024**3), 2)
            memory_used = round(memory.used / (1024**3), 2)
            memory_percent = memory.percent
            
            # –î–∏—Å–∫
            disk = psutil.disk_usage('/')
            disk_total = round(disk.total / (1024**3), 2)
            disk_used = round(disk.used / (1024**3), 2)
            disk_percent = round((disk.used / disk.total) * 100, 1)
            
            # Uptime
            boot_time = datetime.fromtimestamp(psutil.boot_time())
            uptime = datetime.now() - boot_time
            
            return {
                'cpu': {
                    'percent': cpu_percent,
                    'count': cpu_count
                },
                'memory': {
                    'total': memory_total,
                    'used': memory_used,
                    'percent': memory_percent
                },
                'disk': {
                    'total': disk_total,
                    'used': disk_used,
                    'percent': disk_percent
                },
                'uptime': str(uptime).split('.')[0],
                'boot_time': boot_time.strftime('%d.%m.%Y %H:%M:%S')
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            return None

    @staticmethod
    def get_process_info():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö"""
        try:
            processes = []
            for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']):
                try:
                    if proc.info['cpu_percent'] > 1 or proc.info['memory_percent'] > 1:
                        processes.append({
                            'pid': proc.info['pid'],
                            'name': proc.info['name'][:15],
                            'cpu': round(proc.info['cpu_percent'], 1),
                            'memory': round(proc.info['memory_percent'], 1)
                        })
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
                    
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é CPU
            processes.sort(key=lambda x: x['cpu'], reverse=True)
            return processes[:10]  # –¢–æ–ø 10 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö: {e}")
            return []

    @staticmethod
    def get_network_info():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        try:
            net_io = psutil.net_io_counters()
            return {
                'bytes_sent': round(net_io.bytes_sent / (1024**2), 2),
                'bytes_recv': round(net_io.bytes_recv / (1024**2), 2),
                'packets_sent': net_io.packets_sent,
                'packets_recv': net_io.packets_recv
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            return None

class BotManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º"""
    
    def __init__(self):
        self.maintenance_mode = False
        self.blocked_users = set()
        self.bot_stats = {
            'messages_processed': 0,
            'errors_sent': 0,
            'uptime': start_time
        }

    def toggle_maintenance(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
        self.maintenance_mode = not self.maintenance_mode
        return self.maintenance_mode

    def block_user(self, user_id: str):
        """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.blocked_users.add(user_id)

    def unblock_user(self, user_id: str):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.blocked_users.discard(user_id)

    def get_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
        uptime = datetime.now() - self.bot_stats['uptime']
        return {
            **self.bot_stats,
            'uptime_str': str(uptime).split('.')[0],
            'maintenance_mode': self.maintenance_mode,
            'blocked_users_count': len(self.blocked_users)
        }

class ErrorLogger:
    def __init__(self):
        self.platforms = {
            'bot.ts': 'ü§ñ Telegram Bot',
            'savolia-frontend': 'üì± Mini App (Telegram)',
            'savolia-web': 'üåê Web Site'
        }
        self.bot = None
        
    def set_bot(self, bot: Bot):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
        self.bot = bot
    
    def format_error_message(self, error_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        platform = error_data.get('platform', 'unknown')
        user_phone = error_data.get('userPhone', '–ù–µ —É–∫–∞–∑–∞–Ω')
        device = error_data.get('device', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        os_version = error_data.get('osVersion', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        error_type = error_data.get('errorType', '–û–±—â–∞—è –æ—à–∏–±–∫–∞')
        error_message = error_data.get('errorMessage', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
        stack_trace = error_data.get('stackTrace')
        timestamp = error_data.get('timestamp')
        url = error_data.get('url')
        user_id = error_data.get('userId')
        user_agent = error_data.get('userAgent')
        additional_data = error_data.get('additionalData')
        
        platform_icon = self.platforms.get(platform, '‚ùì Unknown Platform')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        if timestamp:
            try:
                dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                formatted_time = dt.strftime('%d.%m.%Y %H:%M:%S')
            except:
                formatted_time = timestamp
        else:
            formatted_time = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
        
        message = f"üö® <b>–û–®–ò–ë–ö–ê –í SAVOLIA</b>\n\n"
        message += f"üìç <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {platform_icon}\n"
        message += f"üì± <b>–ù–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>{user_phone}</code>\n"
        
        if user_id:
            message += f"üÜî <b>User ID:</b> <code>{user_id}</code>\n"
            
        message += f"üíª <b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</b> {device}\n"
        message += f"‚öôÔ∏è <b>–û–°:</b> {os_version}\n"
        message += f"‚ùå <b>–¢–∏–ø –æ—à–∏–±–∫–∏:</b> {error_type}\n"
        message += f"üïê <b>–í—Ä–µ–º—è:</b> {formatted_time}\n\n"
        
        if url:
            message += f"üîó <b>URL:</b> <code>{url}</code>\n\n"
            
        message += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏:</b>\n<code>{error_message}</code>\n\n"
        
        if stack_trace:
            # –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π stack trace
            short_stack = stack_trace[:1000] + '...\n[–û–±—Ä–µ–∑–∞–Ω–æ]' if len(stack_trace) > 1000 else stack_trace
            message += f"üîç <b>Stack Trace:</b>\n<pre>{short_stack}</pre>\n\n"
            
        if user_agent:
            short_ua = user_agent[:100] + '...' if len(user_agent) > 100 else user_agent
            message += f"üåê <b>User Agent:</b>\n<code>{short_ua}</code>\n\n"
            
        if additional_data and isinstance(additional_data, dict) and additional_data:
            formatted_data = json.dumps(additional_data, ensure_ascii=False, indent=2)[:500]
            message += f"üìä <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n<pre>{formatted_data}</pre>"
            
        return message
    
    def parse_user_agent(self, user_agent: Optional[str]) -> Dict[str, str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ User Agent –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
        if not user_agent:
            return {'device': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 'osVersion': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
            
        try:
            parsed = parse_user_agent(user_agent)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            device_parts = []
            if parsed.device.brand:
                device_parts.append(parsed.device.brand)
            if parsed.device.model:
                device_parts.append(parsed.device.model)
            if not device_parts and parsed.browser.family:
                device_parts.append(parsed.browser.family)
                
            device = ' '.join(device_parts) if device_parts else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏—é –û–°
            os_parts = []
            if parsed.os.family:
                os_parts.append(parsed.os.family)
            if parsed.os.version_string:
                os_parts.append(parsed.os.version_string)
                
            os_version = ' '.join(os_parts) if os_parts else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            
            return {'device': device, 'osVersion': os_version}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ User Agent: {e}")
            return {'device': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 'osVersion': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
    
    async def send_error_to_admin(self, error_data: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ –∞–¥–º–∏–Ω—É"""
        global error_count, platform_stats, recent_errors
        
        if not self.bot:
            logger.error("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
            
        try:
            message = self.format_error_message(error_data)
            
            await self.bot.send_message(
                chat_id=ADMIN_ID,
                text=message,
                parse_mode='HTML',
                disable_web_page_preview=True
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            error_count += 1
            platform = error_data.get('platform', 'unknown')
            if platform in platform_stats:
                platform_stats[platform] += 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–¥–∞–≤–Ω–∏–µ –æ—à–∏–±–∫–∏
            recent_errors.append({
                'timestamp': datetime.now(),
                'platform': platform,
                'error_type': error_data.get('errorType', 'Unknown'),
                'user_phone': error_data.get('userPhone', 'Unknown')
            })
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –æ—à–∏–±–æ–∫
            if len(recent_errors) > 50:
                recent_errors = recent_errors[-50:]
            
            logger.info(f"‚úÖ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É: {error_data.get('platform')} - {error_data.get('errorType')}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
            return False

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
error_logger = ErrorLogger()
system_monitor = SystemMonitor()
bot_manager = BotManager()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_main_keyboard():
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    keyboard = [
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
            InlineKeyboardButton("üñ•Ô∏è –°–∏—Å—Ç–µ–º–∞", callback_data="system")
        ],
        [
            InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="management"),
            InlineKeyboardButton("üìù –õ–æ–≥–∏", callback_data="logs")
        ],
        [
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh"),
            InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_system_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    keyboard = [
        [
            InlineKeyboardButton("üíæ –ü–∞–º—è—Ç—å", callback_data="sys_memory"),
            InlineKeyboardButton("‚ö° CPU", callback_data="sys_cpu")
        ],
        [
            InlineKeyboardButton("üíø –î–∏—Å–∫", callback_data="sys_disk"),
            InlineKeyboardButton("üåê –°–µ—Ç—å", callback_data="sys_network")
        ],
        [
            InlineKeyboardButton("üîÑ –ü—Ä–æ—Ü–µ—Å—Å—ã", callback_data="sys_processes"),
            InlineKeyboardButton("üÜô Uptime", callback_data="sys_uptime")
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main"),
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="system")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_management_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º"""
    keyboard = [
        [
            InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", callback_data="mgmt_restart"),
            InlineKeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data="mgmt_pause")
        ],
        [
            InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", callback_data="mgmt_clear_logs"),
            InlineKeyboardButton("üìä –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="mgmt_reset_stats")
        ],
        [
            InlineKeyboardButton("üö´ –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è", callback_data="mgmt_maintenance"),
            InlineKeyboardButton("üì§ –¢–µ—Å—Ç –æ—à–∏–±–∫–∏", callback_data="mgmt_test_error")
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main"),
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="management")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# Telegram –±–æ—Ç handlers
async def start_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = str(update.effective_user.id)
    
    if user_id != ADMIN_ID:
        logger.warning(f"üö´ –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        return
    
    system_info = system_monitor.get_system_info()
    bot_stats = bot_manager.get_stats()
    
    message = (
        "üöÄ <b>Savolia Error Logger Bot - –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –û—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {error_count}\n"
        f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {bot_stats['uptime_str']}\n"
        f"‚Ä¢ –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {'üî¥ –í–ö–õ' if bot_manager.maintenance_mode else 'üü¢ –í–´–ö–õ'}\n\n"
        f"üñ•Ô∏è <b>–°–∏—Å—Ç–µ–º–∞:</b>\n"
        f"‚Ä¢ CPU: {system_info['cpu']['percent'] if system_info else 'N/A'}%\n"
        f"‚Ä¢ RAM: {system_info['memory']['percent'] if system_info else 'N/A'}%\n"
        f"‚Ä¢ –î–∏—Å–∫: {system_info['disk']['percent'] if system_info else 'N/A'}%\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await update.message.reply_text(
        message, 
        parse_mode='HTML',
        reply_markup=get_main_keyboard()
    )

async def admin_panel_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /panel"""
    await start_command(update, context)

async def callback_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    user_id = str(query.from_user.id)
    
    if user_id != ADMIN_ID:
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await query.answer()
    
    if query.data == "close":
        await query.delete_message()
        return
    
    if query.data == "main":
        await start_command(query, context)
        return
        
    if query.data == "refresh":
        await start_command(query, context)
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if query.data == "stats":
        await show_statistics(query)
    
    # –°–∏—Å—Ç–µ–º–∞
    elif query.data == "system":
        await show_system_info(query)
    elif query.data.startswith("sys_"):
        await show_detailed_system_info(query, query.data[4:])
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    elif query.data == "management":
        await show_management_panel(query)
    elif query.data.startswith("mgmt_"):
        await handle_management_action(query, query.data[5:])
    
    # –õ–æ–≥–∏
    elif query.data == "logs":
        await show_logs(query)

async def show_statistics(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    global error_count, platform_stats, recent_errors
    
    bot_stats = bot_manager.get_stats()
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
    recent_text = ""
    if recent_errors:
        recent_text = "\nüìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:</b>\n"
        for i, error in enumerate(recent_errors[-5:], 1):
            time_str = error['timestamp'].strftime('%H:%M:%S')
            recent_text += f"{i}. {time_str} | {error['platform']} | {error['error_type'][:20]}\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
    platform_text = "\nüè¢ <b>–ü–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º:</b>\n"
    for platform, count in platform_stats.items():
        icon = {'bot.ts': 'ü§ñ', 'savolia-frontend': 'üì±', 'savolia-web': 'üåê'}.get(platform, '‚ùì')
        platform_text += f"‚Ä¢ {icon} {platform}: {count}\n"
    
    message = (
        f"üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üî¢ <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {error_count}\n"
        f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {bot_stats['uptime_str']}\n"
        f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {bot_stats['messages_processed']}\n"
        f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {bot_stats['blocked_users_count']}\n"
        f"{platform_text}"
        f"{recent_text}"
    )
    
    await query.edit_message_text(
        message,
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main")]
        ])
    )

async def show_system_info(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
    system_info = system_monitor.get_system_info()
    
    if not system_info:
        await query.edit_message_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ",
            reply_markup=get_system_keyboard()
        )
        return
    
    message = (
        f"üñ•Ô∏è <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        f"‚ö° <b>CPU:</b>\n"
        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {system_info['cpu']['percent']}%\n"
        f"‚Ä¢ –Ø–¥–µ—Ä: {system_info['cpu']['count']}\n\n"
        f"üíæ <b>–ü–∞–º—è—Ç—å:</b>\n"
        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {system_info['memory']['used']} GB / {system_info['memory']['total']} GB\n"
        f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç: {system_info['memory']['percent']}%\n\n"
        f"üíø <b>–î–∏—Å–∫:</b>\n"
        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {system_info['disk']['used']} GB / {system_info['disk']['total']} GB\n"
        f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç: {system_info['disk']['percent']}%\n\n"
        f"üÜô <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b>\n"
        f"‚Ä¢ Uptime: {system_info['uptime']}\n"
        f"‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞: {system_info['boot_time']}"
    )
    
    await query.edit_message_text(
        message,
        parse_mode='HTML',
        reply_markup=get_system_keyboard()
    )

async def show_detailed_system_info(query, info_type):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
    if info_type == "processes":
        processes = system_monitor.get_process_info()
        message = "üîÑ <b>–¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å—ã:</b>\n\n"
        
        for i, proc in enumerate(processes, 1):
            message += f"{i}. <code>{proc['name']}</code>\n"
            message += f"   PID: {proc['pid']} | CPU: {proc['cpu']}% | RAM: {proc['memory']}%\n\n"
            
    elif info_type == "network":
        net_info = system_monitor.get_network_info()
        if net_info:
            message = (
                f"üåê <b>–°–µ—Ç–µ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
                f"üì§ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b>\n"
                f"‚Ä¢ –î–∞–Ω–Ω—ã—Ö: {net_info['bytes_sent']} MB\n"
                f"‚Ä¢ –ü–∞–∫–µ—Ç–æ–≤: {net_info['packets_sent']}\n\n"
                f"üì• <b>–ü–æ–ª—É—á–µ–Ω–æ:</b>\n"
                f"‚Ä¢ –î–∞–Ω–Ω—ã—Ö: {net_info['bytes_recv']} MB\n"
                f"‚Ä¢ –ü–∞–∫–µ—Ç–æ–≤: {net_info['packets_recv']}"
            )
        else:
            message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ç–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
    else:
        message = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
    
    await query.edit_message_text(
        message,
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="system")]
        ])
    )

async def show_management_panel(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    bot_stats = bot_manager.get_stats()
    
    message = (
        f"‚öôÔ∏è <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>\n\n"
        f"ü§ñ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b>\n"
        f"‚Ä¢ –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {'üî¥ –í–ö–õ' if bot_manager.maintenance_mode else 'üü¢ –í–´–ö–õ'}\n"
        f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {bot_stats['uptime_str']}\n"
        f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {bot_stats['blocked_users_count']}\n\n"
        f"üõ†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await query.edit_message_text(
        message,
        parse_mode='HTML',
        reply_markup=get_management_keyboard()
    )

async def handle_management_action(query, action):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    global error_count, platform_stats, recent_errors
    
    if action == "restart":
        await query.edit_message_text(
            "üîÑ <b>–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞...</b>\n\n‚ö†Ô∏è –ë–æ—Ç –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            parse_mode='HTML'
        )
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        await asyncio.sleep(2)
        await query.edit_message_text(
            "‚úÖ <b>–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω!</b>",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="management")]
            ])
        )
        
    elif action == "pause":
        await query.edit_message_text(
            "‚è∏Ô∏è <b>–ë–æ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –æ—à–∏–±–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å", callback_data="mgmt_resume")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="management")]
            ])
        )
        
    elif action == "resume":
        await query.edit_message_text(
            "‚ñ∂Ô∏è <b>–ë–æ—Ç –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω</b>\n\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∞.",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="management")]
            ])
        )
        
    elif action == "clear_logs":
        recent_errors.clear()
        await query.edit_message_text(
            "üßπ <b>–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã</b>\n\n–í—Å–µ –∑–∞–ø–∏—Å–∏ –æ –Ω–µ–¥–∞–≤–Ω–∏—Ö –æ—à–∏–±–∫–∞—Ö —É–¥–∞–ª–µ–Ω—ã.",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="management")]
            ])
        )
        
    elif action == "reset_stats":
        error_count = 0
        platform_stats = {'bot.ts': 0, 'savolia-frontend': 0, 'savolia-web': 0}
        bot_manager.bot_stats['messages_processed'] = 0
        bot_manager.bot_stats['errors_sent'] = 0
        
        await query.edit_message_text(
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞</b>\n\n–í—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ –æ–±–Ω—É–ª–µ–Ω—ã.",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="management")]
            ])
        )
        
    elif action == "maintenance":
        mode = bot_manager.toggle_maintenance()
        status = "–≤–∫–ª—é—á–µ–Ω" if mode else "–≤—ã–∫–ª—é—á–µ–Ω"
        icon = "üî¥" if mode else "üü¢"
        
        await query.edit_message_text(
            f"üö´ <b>–†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è {status}</b>\n\n{icon} –°—Ç–∞—Ç—É—Å: {'–í–ö–õ' if mode else '–í–´–ö–õ'}",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="management")]
            ])
        )
        
    elif action == "test_error":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –æ—à–∏–±–∫—É
        test_error = {
            'platform': 'admin-panel',
            'userPhone': 'ADMIN TEST',
            'userId': 'admin',
            'device': 'Admin Panel',
            'osVersion': 'System',
            'errorType': 'Test Error',
            'errorMessage': '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏',
            'timestamp': datetime.now().isoformat(),
            'additionalData': {'test': True, 'source': 'admin_panel'}
        }
        
        success = await error_logger.send_error_to_admin(test_error)
        
        if success:
            await query.edit_message_text(
                "üì§ <b>–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞</b>\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∏—à–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="management")]
                ])
            )
        else:
            await query.edit_message_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –æ—à–∏–±–∫—É.",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="management")]
                ])
            )

async def show_logs(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"""
    if not recent_errors:
        message = "üìù <b>–õ–æ–≥–∏ –æ—à–∏–±–æ–∫</b>\n\n‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ–± –æ—à–∏–±–∫–∞—Ö."
    else:
        message = f"üìù <b>–õ–æ–≥–∏ –æ—à–∏–±–æ–∫</b> (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {min(len(recent_errors), 20)})\n\n"
        
        for i, error in enumerate(recent_errors[-20:], 1):
            time_str = error['timestamp'].strftime('%d.%m %H:%M:%S')
            platform_icon = {'bot.ts': 'ü§ñ', 'savolia-frontend': 'üì±', 'savolia-web': 'üåê'}.get(error['platform'], '‚ùì')
            
            message += f"{i}. {time_str} | {platform_icon} {error['platform']}\n"
            message += f"   {error['error_type'][:30]} | {error['user_phone'][:15]}\n\n"
    
    await query.edit_message_text(
        message,
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å", callback_data="mgmt_clear_logs")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main")]
        ])
    )

async def handle_message(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = str(update.effective_user.id)
    
    if user_id != ADMIN_ID:
        logger.warning(f"üö´ –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        return

# Flask API endpoints (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@app.route('/api/log-error', methods=['POST'])
def log_error():
    """API —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—à–∏–±–æ–∫"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({
                'success': False,
                'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ'
            }), 400
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
        if bot_manager.maintenance_mode:
            return jsonify({
                'success': False,
                'error': '–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è'
            }), 503
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        platform = data.get('platform')
        error_message = data.get('errorMessage')
        
        if not platform or not error_message:
            return jsonify({
                'success': False,
                'error': '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: platform, errorMessage'
            }), 400
        
        # –ü–∞—Ä—Å–∏–Ω–≥ User Agent
        user_agent = data.get('userAgent')
        device_info = error_logger.parse_user_agent(user_agent)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∏
        error_data = {
            'platform': platform,
            'userPhone': data.get('userPhone', '–ù–µ —É–∫–∞–∑–∞–Ω'),
            'userId': data.get('userId'),
            'device': device_info['device'],
            'osVersion': device_info['osVersion'],
            'errorType': data.get('errorType', 'Runtime Error'),
            'errorMessage': error_message,
            'stackTrace': data.get('stackTrace'),
            'timestamp': data.get('timestamp', datetime.now().isoformat()),
            'url': data.get('url'),
            'userAgent': user_agent,
            'additionalData': data.get('additionalData')
        }
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ –∞–¥–º–∏–Ω—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        sent = loop.run_until_complete(error_logger.send_error_to_admin(error_data))
        loop.close()
        
        if sent:
            bot_manager.bot_stats['messages_processed'] += 1
            return jsonify({
                'success': True,
                'message': '–û—à–∏–±–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞'
            })
        else:
            return jsonify({
                'success': False,
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É'
            }), 500
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ API: {e}")
        return jsonify({
            'success': False,
            'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        }), 500

@app.route('/health', methods=['GET'])
def health_check():
    """Health check —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    system_info = system_monitor.get_system_info()
    bot_stats = bot_manager.get_stats()
    
    return jsonify({
        'status': 'OK',
        'timestamp': datetime.now().isoformat(),
        'service': 'Savolia Error Logger Bot',
        'uptime': bot_stats['uptime_str'],
        'errors_processed': error_count,
        'maintenance_mode': bot_manager.maintenance_mode,
        'system': {
            'cpu_percent': system_info['cpu']['percent'] if system_info else None,
            'memory_percent': system_info['memory']['percent'] if system_info else None,
            'disk_percent': system_info['disk']['percent'] if system_info else None
        }
    })

@app.route('/api/stats', methods=['GET'])
def get_stats():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    bot_stats = bot_manager.get_stats()
    system_info = system_monitor.get_system_info()
    
    return jsonify({
        'bot_stats': bot_stats,
        'system_stats': system_info,
        'error_count': error_count,
        'platform_stats': platform_stats,
        'recent_errors_count': len(recent_errors)
    })

def run_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    async def main():
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –≤ –ª–æ–≥–≥–µ—Ä
        error_logger.set_bot(application.bot)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("panel", admin_panel_command))
        application.add_handler(CallbackQueryHandler(callback_handler))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("üöÄ Savolia Error Logger Bot —Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é –∑–∞–ø—É—â–µ–Ω")
        logger.info(f"üë§ –ê–¥–º–∏–Ω ID: {ADMIN_ID}")
        
        await application.run_polling()
    
    # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    asyncio.run(main())

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=run_bot, daemon=True)
    bot_thread.start()
    
    # –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞
    logger.info(f"üåê API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:{PORT}")
    logger.info(f"üì° –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—à–∏–±–æ–∫: POST /api/log-error")
    logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: GET /api/stats")
    
    app.run(host='0.0.0.0', port=PORT, debug=False)