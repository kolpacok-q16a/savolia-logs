import asyncio
import json
import logging
import os
import psutil
from datetime import datetime
from typing import Dict, Any, Optional
import threading

from flask import Flask, request, jsonify
from flask_cors import CORS
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, Update
from user_agents import parse as parse_user_agent

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = '8087171595:AAGcTv_TiNAY-Mv8CSyaIwk2tzYnnEM4Dsk'
ADMIN_ID = '7752180805'
PORT = int(os.environ.get('PORT', 3333))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
start_time = datetime.now()
error_count = 0
platform_stats = {'bot.ts': 0, 'savolia-frontend': 0, 'savolia-web': 0}
recent_errors = []
maintenance_mode = False

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
CORS(app)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)

class SystemMonitor:
    @staticmethod
    def get_system_info():
        try:
            cpu_percent = psutil.cpu_percent(interval=0.1)
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            
            return {
                'cpu': {'percent': cpu_percent, 'count': psutil.cpu_count()},
                'memory': {
                    'total': round(memory.total / (1024**3), 2),
                    'used': round(memory.used / (1024**3), 2),
                    'percent': memory.percent
                },
                'disk': {
                    'total': round(disk.total / (1024**3), 2),
                    'used': round(disk.used / (1024**3), 2),
                    'percent': round((disk.used / disk.total) * 100, 1)
                },
                'uptime': str(datetime.now() - start_time).split('.')[0]
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            return None

class ErrorLogger:
    def __init__(self):
        self.platforms = {
            'bot.ts': 'ü§ñ Telegram Bot',
            'savolia-frontend': 'üì± Mini App (Telegram)', 
            'savolia-web': 'üåê Web Site'
        }

    def parse_user_agent(self, user_agent: Optional[str]) -> Dict[str, str]:
        if not user_agent:
            return {'device': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 'osVersion': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
        try:
            parsed = parse_user_agent(user_agent)
            device_parts = []
            if parsed.device.brand:
                device_parts.append(parsed.device.brand)
            if parsed.device.model:
                device_parts.append(parsed.device.model)
            if not device_parts and parsed.browser.family:
                device_parts.append(parsed.browser.family)
            device = ' '.join(device_parts) if device_parts else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            
            os_parts = []
            if parsed.os.family:
                os_parts.append(parsed.os.family)
            if parsed.os.version_string:
                os_parts.append(parsed.os.version_string)
            os_version = ' '.join(os_parts) if os_parts else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            
            return {'device': device, 'osVersion': os_version}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ User Agent: {e}")
            return {'device': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 'osVersion': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

    def format_error_message(self, error_data: Dict[str, Any]) -> str:
        platform = error_data.get('platform', 'unknown')
        platform_icon = self.platforms.get(platform, '‚ùì Unknown Platform')
        
        if error_data.get('timestamp'):
            try:
                dt = datetime.fromisoformat(error_data['timestamp'].replace('Z', '+00:00'))
                formatted_time = dt.strftime('%d.%m.%Y %H:%M:%S')
            except:
                formatted_time = error_data['timestamp']
        else:
            formatted_time = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
        
        message = f"üö® <b>–û–®–ò–ë–ö–ê –í SAVOLIA</b>\n\n"
        message += f"üìç <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {platform_icon}\n"
        message += f"üì± <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{error_data.get('userPhone', '–ù–µ —É–∫–∞–∑–∞–Ω')}</code>\n"
        message += f"üíª <b>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</b> {error_data.get('device', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        message += f"‚öôÔ∏è <b>–û–°:</b> {error_data.get('osVersion', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        message += f"‚ùå <b>–¢–∏–ø:</b> {error_data.get('errorType', '–û–±—â–∞—è –æ—à–∏–±–∫–∞')}\n"
        message += f"üïê <b>–í—Ä–µ–º—è:</b> {formatted_time}\n\n"
        
        if error_data.get('url'):
            message += f"üîó <b>URL:</b> <code>{error_data['url']}</code>\n\n"
        
        message += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<code>{error_data.get('errorMessage', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}</code>\n"
        
        if error_data.get('stackTrace'):
            stack = error_data['stackTrace'][:800] + '...[–û–±—Ä–µ–∑–∞–Ω–æ]' if len(error_data['stackTrace']) > 800 else error_data['stackTrace']
            message += f"\nüîç <b>Stack Trace:</b>\n<pre>{stack}</pre>"
        
        return message

    def send_error_to_admin_sync(self, error_data: Dict[str, Any]) -> bool:
        global error_count, platform_stats, recent_errors
        try:
            message = self.format_error_message(error_data)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
            import requests
            
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
            payload = {
                'chat_id': ADMIN_ID,
                'text': message,
                'parse_mode': 'HTML',
                'disable_web_page_preview': True
            }
            
            response = requests.post(url, json=payload, timeout=10)
            
            if response.status_code == 200:
                error_count += 1
                platform = error_data.get('platform', 'unknown')
                if platform in platform_stats:
                    platform_stats[platform] += 1
                
                recent_errors.append({
                    'timestamp': datetime.now(),
                    'platform': platform,
                    'error_type': error_data.get('errorType', 'Unknown'),
                    'user_phone': error_data.get('userPhone', 'Unknown')
                })
                
                if len(recent_errors) > 50:
                    recent_errors = recent_errors[-50:]
                
                logger.info(f"‚úÖ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {platform} - {error_data.get('errorType')}")
                return True
            else:
                logger.error(f"‚ùå Telegram API error: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return False

error_logger = ErrorLogger()
system_monitor = SystemMonitor()

# –ü—Ä–æ—Å—Ç—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è webhook
def send_telegram_message(chat_id, text, reply_markup=None):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        import requests
        
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'HTML',
            'disable_web_page_preview': True
        }
        
        if reply_markup:
            payload['reply_markup'] = reply_markup.to_json()
        
        response = requests.post(url, json=payload, timeout=10)
        return response.status_code == 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

def edit_telegram_message(chat_id, message_id, text, reply_markup=None):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        import requests
        
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/editMessageText"
        payload = {
            'chat_id': chat_id,
            'message_id': message_id,
            'text': text,
            'parse_mode': 'HTML',
            'disable_web_page_preview': True
        }
        
        if reply_markup:
            payload['reply_markup'] = reply_markup.to_json()
        
        response = requests.post(url, json=payload, timeout=10)
        return response.status_code == 200
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

def get_main_keyboard():
    keyboard = [
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
            InlineKeyboardButton("üñ•Ô∏è –°–∏—Å—Ç–µ–º–∞", callback_data="system")
        ],
        [
            InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="management"),
            InlineKeyboardButton("üìù –õ–æ–≥–∏", callback_data="logs")
        ],
        [
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def handle_start_command(chat_id):
    system_info = system_monitor.get_system_info()
    
    message = (
        "üöÄ <b>Savolia Error Logger Bot</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –û—à–∏–±–æ–∫: {error_count}\n"
        f"‚Ä¢ Uptime: {system_info['uptime'] if system_info else 'N/A'}\n"
        f"‚Ä¢ –†–µ–∂–∏–º: {'üî¥ –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ' if maintenance_mode else 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω'}\n\n"
        f"üñ•Ô∏è <b>–°–∏—Å—Ç–µ–º–∞:</b>\n"
        f"‚Ä¢ CPU: {system_info['cpu']['percent'] if system_info else 'N/A'}%\n"
        f"‚Ä¢ RAM: {system_info['memory']['percent'] if system_info else 'N/A'}%\n"
        f"‚Ä¢ –î–∏—Å–∫: {system_info['disk']['percent'] if system_info else 'N/A'}%\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    return send_telegram_message(chat_id, message, get_main_keyboard())

def handle_callback_query(chat_id, message_id, callback_data):
    if callback_data == "refresh":
        return handle_refresh(chat_id, message_id)
    elif callback_data == "stats":
        return handle_stats(chat_id, message_id)
    elif callback_data == "system":
        return handle_system(chat_id, message_id)
    elif callback_data == "management":
        return handle_management(chat_id, message_id)
    elif callback_data == "logs":
        return handle_logs(chat_id, message_id)
    elif callback_data == "test_error":
        return handle_test_error(chat_id, message_id)
    
    return False

def handle_refresh(chat_id, message_id):
    system_info = system_monitor.get_system_info()
    
    message = (
        "üöÄ <b>Savolia Error Logger Bot</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –û—à–∏–±–æ–∫: {error_count}\n"
        f"‚Ä¢ Uptime: {system_info['uptime'] if system_info else 'N/A'}\n"
        f"‚Ä¢ –†–µ–∂–∏–º: {'üî¥ –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ' if maintenance_mode else 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω'}\n\n"
        f"üñ•Ô∏è <b>–°–∏—Å—Ç–µ–º–∞:</b>\n"
        f"‚Ä¢ CPU: {system_info['cpu']['percent'] if system_info else 'N/A'}%\n"
        f"‚Ä¢ RAM: {system_info['memory']['percent'] if system_info else 'N/A'}%\n"
        f"‚Ä¢ –î–∏—Å–∫: {system_info['disk']['percent'] if system_info else 'N/A'}%\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    return edit_telegram_message(chat_id, message_id, message, get_main_keyboard())

def handle_stats(chat_id, message_id):
    platform_text = "\nüè¢ <b>–ü–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º:</b>\n"
    for platform, count in platform_stats.items():
        icon = {'bot.ts': 'ü§ñ', 'savolia-frontend': 'üì±', 'savolia-web': 'üåê'}.get(platform, '‚ùì')
        platform_text += f"‚Ä¢ {icon} {platform}: {count}\n"
    
    recent_text = ""
    if recent_errors:
        recent_text = "\nüìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:</b>\n"
        for i, error in enumerate(recent_errors[-5:], 1):
            time_str = error['timestamp'].strftime('%H:%M:%S')
            recent_text += f"{i}. {time_str} | {error['platform']}\n"
    
    message = (
        f"üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üî¢ <b>–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {error_count}\n"
        f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {system_monitor.get_system_info()['uptime'] if system_monitor.get_system_info() else 'N/A'}\n"
        f"{platform_text}"
        f"{recent_text}"
    )
    
    back_keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="refresh")]])
    return edit_telegram_message(chat_id, message_id, message, back_keyboard)

def handle_system(chat_id, message_id):
    system_info = system_monitor.get_system_info()
    if not system_info:
        message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
    else:
        message = (
            f"üñ•Ô∏è <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
            f"‚ö° <b>CPU:</b> {system_info['cpu']['percent']}% ({system_info['cpu']['count']} —è–¥–µ—Ä)\n\n"
            f"üíæ <b>–ü–∞–º—è—Ç—å:</b>\n"
            f"‚Ä¢ {system_info['memory']['used']} GB / {system_info['memory']['total']} GB\n"
            f"‚Ä¢ {system_info['memory']['percent']}%\n\n"
            f"üíø <b>–î–∏—Å–∫:</b>\n"
            f"‚Ä¢ {system_info['disk']['used']} GB / {system_info['disk']['total']} GB\n"
            f"‚Ä¢ {system_info['disk']['percent']}%\n\n"
            f"üÜô <b>Uptime:</b> {system_info['uptime']}"
        )
    
    back_keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="refresh")]])
    return edit_telegram_message(chat_id, message_id, message, back_keyboard)

def handle_management(chat_id, message_id):
    keyboard = [
        [InlineKeyboardButton("üì§ –¢–µ—Å—Ç –æ—à–∏–±–∫–∏", callback_data="test_error")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="refresh")]
    ]
    
    message = (
        f"‚öôÔ∏è <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>\n\n"
        f"ü§ñ <b>–°—Ç–∞—Ç—É—Å:</b>\n"
        f"‚Ä¢ –†–µ–∂–∏–º: {'üî¥ –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ' if maintenance_mode else 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω'}\n"
        f"‚Ä¢ –û—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {error_count}\n\n"
        f"üõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:"
    )
    
    return edit_telegram_message(chat_id, message_id, message, InlineKeyboardMarkup(keyboard))

def handle_logs(chat_id, message_id):
    if not recent_errors:
        message = "üìù <b>–õ–æ–≥–∏ –æ—à–∏–±–æ–∫</b>\n\n‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π."
    else:
        message = f"üìù <b>–õ–æ–≥–∏ –æ—à–∏–±–æ–∫</b> (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {min(len(recent_errors), 10)})\n\n"
        for i, error in enumerate(recent_errors[-10:], 1):
            time_str = error['timestamp'].strftime('%d.%m %H:%M')
            platform_icon = {'bot.ts': 'ü§ñ', 'savolia-frontend': 'üì±', 'savolia-web': 'üåê'}.get(error['platform'], '‚ùì')
            message += f"{i}. {time_str} | {platform_icon} {error['platform']}\n"
            message += f"   {error['error_type'][:25]}\n\n"
    
    back_keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="refresh")]])
    return edit_telegram_message(chat_id, message_id, message, back_keyboard)

def handle_test_error(chat_id, message_id):
    test_error = {
        'platform': 'admin-panel',
        'userPhone': 'ADMIN TEST',
        'device': 'Admin Panel',
        'osVersion': 'System',
        'errorType': 'Test Error',
        'errorMessage': '–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏',
        'timestamp': datetime.now().isoformat(),
        'additionalData': {'test': True}
    }
    
    success = error_logger.send_error_to_admin_sync(test_error)
    
    if success:
        message = "üì§ <b>–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∏—à–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    else:
        message = "‚ùå <b>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏</b>"
    
    back_keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="management")]])
    return edit_telegram_message(chat_id, message_id, message, back_keyboard)

# Flask endpoints
@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        json_data = request.get_json()
        
        if not json_data:
            return jsonify({'status': 'no_data'}), 200
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if 'message' in json_data:
            message = json_data['message']
            chat_id = message['chat']['id']
            user_id = str(message['from']['id'])
            
            if user_id != ADMIN_ID:
                logger.warning(f"üö´ –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: {user_id}")
                return jsonify({'status': 'unauthorized'}), 200
            
            if 'text' in message and message['text'].startswith('/start'):
                handle_start_command(chat_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query
        elif 'callback_query' in json_data:
            callback_query = json_data['callback_query']
            chat_id = callback_query['message']['chat']['id']
            message_id = callback_query['message']['message_id']
            user_id = str(callback_query['from']['id'])
            callback_data = callback_query['data']
            
            if user_id != ADMIN_ID:
                logger.warning(f"üö´ –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π callback: {user_id}")
                return jsonify({'status': 'unauthorized'}), 200
            
            handle_callback_query(chat_id, message_id, callback_data)
        
        return jsonify({'status': 'ok'}), 200
        
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return jsonify({'status': 'error'}), 200

@app.route('/api/log-error', methods=['POST'])
def log_error():
    try:
        data = request.get_json()
        if not data:
            return jsonify({'success': False, 'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}), 400
        
        if maintenance_mode:
            return jsonify({'success': False, 'error': '–†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è'}), 503
        
        platform = data.get('platform')
        error_message = data.get('errorMessage')
        
        if not platform or not error_message:
            return jsonify({'success': False, 'error': '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: platform, errorMessage'}), 400
        
        user_agent = data.get('userAgent')
        device_info = error_logger.parse_user_agent(user_agent)
        
        error_data = {
            'platform': platform,
            'userPhone': data.get('userPhone', '–ù–µ —É–∫–∞–∑–∞–Ω'),
            'userId': data.get('userId'),
            'device': device_info['device'],
            'osVersion': device_info['osVersion'],
            'errorType': data.get('errorType', 'Runtime Error'),
            'errorMessage': error_message,
            'stackTrace': data.get('stackTrace'),
            'timestamp': data.get('timestamp', datetime.now().isoformat()),
            'url': data.get('url'),
            'userAgent': user_agent,
            'additionalData': data.get('additionalData')
        }
        
        sent = error_logger.send_error_to_admin_sync(error_data)
        
        if sent:
            return jsonify({'success': True, 'message': '–û—à–∏–±–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞'})
        else:
            return jsonify({'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å'}), 500
            
    except Exception as e:
        logger.error(f"‚ùå API error: {e}")
        return jsonify({'success': False, 'error': '–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞'}), 500

@app.route('/health', methods=['GET'])
def health_check():
    system_info = system_monitor.get_system_info()
    return jsonify({
        'status': 'OK',
        'timestamp': datetime.now().isoformat(),
        'service': 'Savolia Error Logger Bot',
        'uptime': system_info['uptime'] if system_info else 'N/A',
        'errors_processed': error_count,
        'maintenance_mode': maintenance_mode,
        'system': {
            'cpu_percent': system_info['cpu']['percent'] if system_info else None,
            'memory_percent': system_info['memory']['percent'] if system_info else None,
            'disk_percent': system_info['disk']['percent'] if system_info else None
        } if system_info else None
    })

@app.route('/api/stats', methods=['GET'])
def get_stats():
    system_info = system_monitor.get_system_info()
    return jsonify({
        'error_count': error_count,
        'platform_stats': platform_stats,
        'recent_errors_count': len(recent_errors),
        'system_stats': system_info,
        'maintenance_mode': maintenance_mode,
        'uptime': system_info['uptime'] if system_info else 'N/A'
    })

if __name__ == '__main__':
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
    try:
        import requests
        webhook_url = f"https://savolia-logs.onrender.com/webhook"
        
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook"
        response = requests.post(url, json={'url': webhook_url}, timeout=10)
        
        if response.status_code == 200:
            logger.info("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {response.status_code}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
    
    logger.info("üöÄ Savolia Error Logger Bot –∑–∞–ø—É—â–µ–Ω")
    logger.info(f"üë§ –ê–¥–º–∏–Ω ID: {ADMIN_ID}")
    logger.info(f"üåê –°–µ—Ä–≤–µ—Ä: http://localhost:{PORT}")
    
    app.run(host='0.0.0.0', port=PORT, debug=False)